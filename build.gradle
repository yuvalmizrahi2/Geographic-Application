/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'

apply plugin: 'eclipse'

apply plugin: 'java'



// In this section you declare where to find the dependencies of your project
repositories {

    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
configurations {
   jaxDoclet
 }

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    // https://mvnrepository.com/artifact/de.micromata.jak/JavaAPIforKml
    compile group: 'de.micromata.jak', name: 'JavaAPIforKml', version: '2.2.0'
    
    // https://mvnrepository.com/artifact/com.toedter/jcalendar
    compile group: 'com.toedter', name: 'jcalendar', version: '1.4'
    
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M2'
    
    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'
    
    
    
}
javadoc {
source = sourceSets.main.allJava
classpath = configurations.compile
}
task generateRestApiDocs(type: Javadoc) {
   source = sourceSets.main.allJava
   destinationDir = reporting.file("rest-api-docs")
   options.docletpath = configurations.jaxDoclet.files.asType(List)
   options.doclet = "com.lunatech.doclets.jax.jaxrs.JAXRSDoclet"
   options.addStringOption("jaxrscontext", "http://localhost:8080/myapp")
 }
 task myZip(type: Zip) {
   from 'Task/'
   include '*'
   include '*/*' //to include contents of a folder present inside Reports directory
   archiveName 'Project.zip'
   destinationDir(file('Task/'))
}
